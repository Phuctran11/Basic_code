#exercise 2 in mini project mips

.data
enter_n: .asciiz "Enter the value of N: "
enter_m: .asciiz "Enter the value of M: "
result: .asciiz "Prime numbers in the range: "
newline: .asciiz "\n"
space: .asciiz " "
no_result: .asciiz "No prime numbers in the range"

.text
  
main:
    li $t4, 0 #give first numbers of prime numbers
    li $t2, 1
    li $t3, 2
    #print instruction to enter n
    li $v0, 4
    la $a0, enter_n
    syscall
    #read n from keyboard
    li $v0, 5
    syscall
    addi  $s0, $v0, 0  # Store N in $s0
    #print instruction to enter m
    li $v0, 4
    la $a0, enter_m
    syscall
    #read m from keyboard
    li $v0, 5
    syscall
    add $s1, $v0, 0  # Store M in $s1
    
    #if N > M, go to main to reenter
    slt $t1, $s1, $s0
    bne $t1, $zero, main 
    #print line to start prime number
    li $v0, 4
    la $a0, result
    syscall


loop:
    
    bgt $s0, $s1, no_number  # If N > M, exit loop
    
    addi $a0, $s0, 0  # Pass N to check_prime
    jal check_prime  # Call check_prime function
    addi $s0, $s0, 1  # Increase N
    beq $v0, $zero, loop  # If not prime, continue loop

    # if  prime, print it
    li $v0, 1
    addi $a0, $a0, 0
    addi $t4, $t4, 1 #plus 1 to count numbers 
    syscall

    # Print a space
    li $v0, 4
    la $a0, space
    syscall

    j loop

no_number:
	bne $t4, $zero, end
	li $v0, 4
	la $a0, no_result
	syscall
	j end

end:  
    li $v0, 4
    la $a0, newline #down the line to finish the result
    syscall

    li $v0, 10
    syscall

check_prime:
    #Prime number has 2 divisibilities that 1 and it and this number has to greater or equal to 2.
    # Check if input in $a0 is a prime number
    # Returns 1 in $v0 if prime, 0 if not prime

    
    li $v0, 1 #give first result ( is prime)
   
    # Special cases
    ble $a0, $zero, not_prime #if is less then 0, not_prime
    beq $a0, $zero, not_prime  # if  it is 0, not prime
    beq $a0, $t2, not_prime #if it is 1,not prime
    beq $a0, $t3, prime_end  #if it is 2, is prime

    # Check for index $t0 from 2 to sqrt(N)
    li $t0, 2  # Start checking from 2
loop_check:
        mult $t0, $t0  # Calculate square of $t0
        addi $t1, $t0, 0  # Store result in $t1
        bge $t1, $a0, prime_end  # If square > N, N is prime

        div $a0, $t0  # Divide N by $t0
        mfhi $t2  # Store remainder in $t2
        beq $t2, $zero, not_prime  # If remainder is 0, N is not prime

        addi $t0, $t0, 1  # Increase $t0->$t0+1
        j loop_check

not_prime:
        li $v0, 0  # N is not prime
        j prime_end

prime_end:
        jr $ra #come back to instruction next to "jal check_prime"
