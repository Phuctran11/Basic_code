#include <iostream>
#include <vector>
using namespace std;

vector<vector<pair<int, int>>> adj;
vector<int> subtreeSize, dpTree, result;

void dfs(int node, int parent) {
    subtreeSize[node] = 1;
    dpTree[node] = 0;
    for (auto &[nebr, weight] : adj[node]) {
        if (nebr != parent) {
            dfs(nebr, node);
            subtreeSize[node] += subtreeSize[nebr];
            dpTree[node] += dpTree[nebr] + subtreeSize[nebr] * weight;
        }
    }
}

void reroot(int node, int parent) {
    result[node] = dpTree[node];

    for (auto &[nebr, weight] : adj[node]) {
        if (nebr != parent) {
            int dpNode = dpTree[node];
            int dpNebr = dpTree[nebr];

            dpTree[node] -= dpTree[nebr] + subtreeSize[nebr] * weight;
            subtreeSize[node] -= subtreeSize[nebr];

            dpTree[nebr] += dpTree[node] + subtreeSize[node] * weight;
            subtreeSize[nebr] += subtreeSize[node];

            reroot(nebr, node);

            dpTree[nebr] = dpNebr;
            subtreeSize[nebr] = subtreeSize[node] - subtreeSize[nebr];
            dpTree[node] = dpNode;
            subtreeSize[node] += subtreeSize[nebr];
        }
    }
}

int main() {
    int n;
    cin >> n;
    adj.resize(n + 1);
    subtreeSize.resize(n + 1);
    dpTree.resize(n + 1);
    result.resize(n + 1);

    for (int i = 0; i < n - 1; ++i) {
        int u, v, w;
        cin >> u >> v >> w;
        adj[u].emplace_back(v, w);
        adj[v].emplace_back(u, w);
    }

    dfs(1, -1);
    reroot(1, -1);

    for (int i = 1; i <= n; ++i) {
        cout << result[i] << " ";
    }
    cout << endl;

    return 0;
}